#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>;
};

#define MOUSE_SCROLL_MAX 100

#undef SCROLL_UP
#undef SCROLL_DOWN

#define SCROLL_UP SCROLL_VERT(MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-MOUSE_SCROLL_MAX)

&mmv {
    time-to-max-speed-ms = <10>;
    acceleration-exponent = <1>;
};

&mwh {
    time-to-max-speed-ms = <10>;
    acceleration-exponent = <1>;
};

/* Layers */

#define BASE 0
#define LOWER 1
#define RAISE 2
#define COMBO 3

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold&Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
        };

        lprn: lprn {
            compatible = "zmk,behavior-mod-morph";
            label = "LPRN";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rpen: rpen {
            compatible = "zmk,behavior-mod-morph";
            label = "RPEN";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        entbsp: entbsp {
            compatible = "zmk,behavior-mod-morph";
            label = "ENTBSP";
            bindings = <&kp ENTER>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH";
            bindings = <&kp SLASH>, <&kp NON_US_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lbrkt: lbrkt {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRKT";
            bindings = <&kp LEFT_BRACKET>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rbrkt: rbrkt {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRKT";
            bindings = <&kp RIGHT_BRACKET>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        four_dollar: four_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "FOUR_DOLLAR";
            bindings = <&kp N4>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        six_caret: six_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "SIX_CARET";
            bindings = <&kp N6>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        nine_tilde: nine_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "NINE_TILDE";
            bindings = <&kp N9>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        semi_col: semi_col {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_COL";
            bindings = <&kp SEMICOLON>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        and: and {
            compatible = "zmk,behavior-mod-morph";
            label = "AND";
            bindings = <&kp AMPERSAND>, <&ma_and>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        semicol: semicol {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMICOL";
            bindings = <&kp SEMICOLON>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hold_semicol: hold_semicol {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold&Semicol";
            bindings = <&kp>, <&semicol>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
        };

        quot: quot {
            compatible = "zmk,behavior-mod-morph";
            label = "quot";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SQT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hold_quot: hold_quot {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold&Quot";
            bindings = <&kp>, <&quot>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
        };

        or: or {
            compatible = "zmk,behavior-mod-morph";
            label = "OR";
            bindings = <&kp PIPE>, <&ma_or>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_ques: dot_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_QUES";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        com_excl: com_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_EXCL";
            bindings = <&kp COMMA>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hold_four_dollar: hold_four_dollar {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold&Four";
            bindings = <&kp>, <&four_dollar>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
        };

        hold_six_caret: hold_six_caret {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold&Six";
            bindings = <&kp>, <&six_caret>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
        };

        hold_ent_bsp: hold_ent_bsp {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold&Enter";
            bindings = <&kp>, <&entbsp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
        };

        unds_del: unds_del {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDS_DEL";
            bindings = <&kp UNDERSCORE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        zero_del: zero_del {
            compatible = "zmk,behavior-mod-morph";
            label = "ZERO_DEL";
            bindings = <&kp N0>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        ma_equal: ma_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>, <&macro_press>;

            label = "MA_EQUAL";
        };

        ma_pointer: ma_pointer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MA_POINTER";
        };

        ma_or: ma_or {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE>;
            label = "MA_OR";
        };

        ma_and: ma_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AMPS &kp AMPS>;
            label = "MA_AND";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp Q             &kp W        &kp E           &kp R           &kp T        &ht LC(Y) Y  &kp U            &kp I           &kp O        &kp P
&ht LEFT_SHIFT A  &ht LCTRL S  &ht LEFT_GUI D  &ht LEFT_ALT F  &kp G        &kp H        &ht RIGHT_ALT J  &ht LEFT_GUI K  &ht RCTRL L  &hold_ent_bsp LEFT_SHIFT 0
&ht LC(Z) Z       &ht LC(X) X  &ht LC(C) C     &ht LC(V) V     &lt 2 SPACE  &lt 1 SPACE  &kp B            &kp N           &kp M        &unds_del
            >;

            label = "BASE";
        };

        LOWER {
            bindings = <
&gresc     &kp HOME   &kp UP     &kp END    &lbrkt       &rbrkt  &and      &or                   &ma_pointer         &kp EQUAL
&kp TAB    &kp LEFT   &kp DOWN   &kp RIGHT  &lprn        &rpen   &kp LALT  &hold_semicol LGUI 0  &hold_quot LCTRL 0  &hold_ent_bsp LEFT_SHIFT 0
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &lt 3 SPACE  &none   &slash    &com_excl             &dot_ques           &kp MINUS
            >;

            label = "LOWER";
        };

        RAISE {
            bindings = <
&gresc   &mkp LCLK       &mmv MOVE_UP    &mkp RCLK         &none  &none        &kp N1                    &kp N2       &kp N3                   &none
&kp TAB  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &none  &none        &hold_four_dollar LALT 0  &ht RGUI N5  &hold_six_caret RCTRL 0  &hold_ent_bsp LEFT_SHIFT 0
&none    &mwh SCROLL_UP  &mkp MCLK       &mwh SCROLL_DOWN  &none  &lt 3 SPACE  &kp N7                    &kp N8       &nine_tilde              &zero_del
            >;

            label = "RAISE";
        };

        COMBO {
            bindings = <
&none       &and   &or        &ma_pointer  &none  &none  &kp F1  &kp F2  &kp F3  &none
&kp LSHIFT  &none  &ma_equal  &none        &none  &none  &kp F4  &kp F5  &kp F6  &ht LSHIFT ENTER
&none       &none  &none      &none        &none  &none  &kp F7  &kp F8  &kp F9  &none
            >;

            label = "COMBO";
        };
    };
};
